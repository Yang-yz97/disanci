version: '3.8'

services:
  # Nginx 服务
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./dist:/usr/share/nginx/html:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - api
    networks:
      - app-network
    restart: always
    
  # API 服务
  api:
    build: 
      context: ./server
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD_FILE=/run/secrets/db_password
      - JWT_SECRET_FILE=/run/secrets/jwt_secret
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./logs/api:/app/logs
    depends_on:
      - db
      - redis
    networks:
      - app-network
    restart: always
    secrets:
      - db_password
      - jwt_secret
    
  # 数据库服务
  db:
    image: postgres:13-alpine
    environment:
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - app-network
    restart: always
    secrets:
      - db_password
    
  # Redis 缓存服务
  redis:
    image: redis:alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    networks:
      - app-network
    restart: always
    
  # 监控服务
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - app-network
    restart: always
    
  # 日志聚合服务
  logstash:
    image: docker.elastic.co/logstash/logstash:7.9.3
    volumes:
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
      - ./logs:/logs:ro
    networks:
      - app-network
    restart: always
    
  # 备份服务
  backup:
    image: postgres:13-alpine
    volumes:
      - ./backup.sh:/backup.sh:ro
      - ./backups:/backups
    environment:
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
      - BACKUP_SCHEDULE=0 0 * * *
    depends_on:
      - db
    networks:
      - app-network
    entrypoint: ["/bin/sh", "-c", "chmod +x /backup.sh && /backup.sh"]
    restart: always
    secrets:
      - db_password

volumes:
  postgres-data:
  redis-data:
  prometheus-data:

networks:
  app-network:
    driver: bridge

secrets:
  db_password:
    file: ./secrets/db_password.txt
  jwt_secret:
    file: ./secrets/jwt_secret.txt 